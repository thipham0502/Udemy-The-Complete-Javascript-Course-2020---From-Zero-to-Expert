{"mappings":"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","sources":["./scriptProject.js"],"sourcesContent":["'use strict';\r\n\r\n// const { clearInterval } = require('timers');\r\n\r\n//const { setInterval } = require('timers');\r\n\r\n/* Lec143. BANKIST APP (See Bankist-flowchart.png) */\r\n// Demo at: https://bankist.netlify.app/\r\n\r\n//////// DATA \\\\\\\\\\\\\\\\\r\nlet account1 = {\r\n\towner: 'Jonas Schmedtmann',\r\n\tmovements: [ 200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300 ],\r\n\tmovementsSorted: [], //storing movements after sorted\r\n\tinterestRate: 1.2, // %\r\n\tpin: 1111,\r\n\tmovementsDates: [\r\n\t\t'2019-11-18T21:31:17.178Z',\r\n\t\t'2019-12-23T07:42:02.383Z',\r\n\t\t'2020-01-28T09:15:04.904Z',\r\n\t\t'2020-04-01T10:17:24.185Z',\r\n\t\t'2021-01-08T14:11:59.604Z',\r\n\t\t'2021-01-09T17:01:17.194Z',\r\n\t\t'2021-01-10T23:36:17.929Z',\r\n\t\t'2021-01-11T10:51:36.790Z'\r\n\t],\r\n\tmovementsDatesSorted: [], //storing movement dates after sorted\r\n\tcurrency: 'EUR',\r\n\tlocale: 'pt-PT' // de-DE\r\n};\r\n\r\nlet account2 = {\r\n\towner: 'Jessica Davis',\r\n\tmovements: [ 5000, 3400, -150, -790, -3210, -1000, 8500, -30 ],\r\n\tmovementsSorted: [], //storing movements after sorted\r\n\tinterestRate: 1.5,\r\n\tpin: 2222,\r\n\tmovementsDates: [\r\n\t\t'2019-11-01T13:15:33.035Z',\r\n\t\t'2019-11-30T09:48:16.867Z',\r\n\t\t'2019-12-25T06:04:23.907Z',\r\n\t\t'2020-01-25T14:18:46.235Z',\r\n\t\t'2020-02-05T16:33:06.386Z',\r\n\t\t'2020-04-10T14:43:26.374Z',\r\n\t\t'2020-06-25T18:49:59.371Z',\r\n\t\t'2020-07-26T12:01:20.894Z'\r\n\t],\r\n\tmovementsDatesSorted: [], //storing movement dates after sorted\r\n\tcurrency: 'USD',\r\n\tlocale: 'en-US'\r\n};\r\n\r\nlet account3 = {\r\n\towner: 'Steven Thomas Williams',\r\n\tmovements: [ 200, -200, 340, -300, -20, 50, 400, -460 ],\r\n\tmovementsSorted: [], //storing movements after sorted\r\n\tinterestRate: 0.7,\r\n\tpin: 3333,\r\n\tmovementsDates: [\r\n\t\t'2019-12-01T13:15:33.035Z',\r\n\t\t'2019-11-30T09:48:16.867Z',\r\n\t\t'2019-12-15T06:04:23.907Z',\r\n\t\t'2020-01-11T03:28:46.235Z',\r\n\t\t'2020-03-05T16:23:06.386Z',\r\n\t\t'2020-04-10T14:43:26.374Z',\r\n\t\t'2020-06-25T15:49:59.371Z',\r\n\t\t'2020-07-06T12:01:20.894Z'\r\n\t],\r\n\tmovementsDatesSorted: [], //storing movement dates after sorted\r\n\tcurrency: 'VND',\r\n\tlocale: 'vi-VN'\r\n};\r\n\r\nlet account4 = {\r\n\towner: 'Sarah Smith',\r\n\tmovements: [ 430, 1000, 700, 50, 90 ],\r\n\tmovementsSorted: [], //storing movements after sorted\r\n\tinterestRate: 1,\r\n\tpin: 4444,\r\n\tmovementsDates: [\r\n\t\t'2019-12-01T13:15:33.035Z',\r\n\t\t'2019-11-30T09:48:16.867Z',\r\n\t\t'2019-12-15T06:04:23.907Z',\r\n\t\t'2020-01-11T03:28:46.235Z',\r\n\t\t'2020-03-05T16:23:06.386Z',\r\n\t\t'2020-04-10T14:43:26.374Z',\r\n\t\t'2020-06-25T15:49:59.371Z',\r\n\t\t'2020-07-06T12:01:20.894Z'\r\n\t],\r\n\tmovementsDatesSorted: [], //storing movement dates after sorted\r\n\tcurrency: 'USD',\r\n\tlocale: 'en-GB'\r\n};\r\n\r\nlet accounts = [ account1, account2, account3, account4 ]; //array of objects\r\n\r\n//////// ELEMENTS \\\\\\\\\\\\\\\\\r\nconst labelWelcome = document.querySelector('.welcome');\r\nconst labelDate = document.querySelector('.date');\r\nconst labelBalance = document.querySelector('.balance__value');\r\nconst labelSumIn = document.querySelector('.summary__value--in');\r\nconst labelSumOut = document.querySelector('.summary__value--out');\r\nconst labelSumInterest = document.querySelector('.summary__value--interest');\r\nconst labelTimer = document.querySelector('.timer');\r\n\r\nconst containerApp = document.querySelector('.app');\r\nconst containerMovements = document.querySelector('.movements');\r\n\r\nconst btnLogin = document.querySelector('.login__btn');\r\nconst btnTransfer = document.querySelector('.form__btn--transfer');\r\nconst btnLoan = document.querySelector('.form__btn--loan');\r\nconst btnClose = document.querySelector('.form__btn--close');\r\nconst btnSort = document.querySelector('.btn--sort');\r\n\r\nconst inputLoginUsername = document.querySelector('.login__input--user');\r\nconst inputLoginPin = document.querySelector('.login__input--pin');\r\nconst inputTransferTo = document.querySelector('.form__input--to');\r\nconst inputTransferAmount = document.querySelector('.form__input--amount');\r\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\r\nconst inputCloseUsername = document.querySelector('.form__input--user');\r\nconst inputClosePin = document.querySelector('.form__input--pin');\r\n\r\n/* Lec144. BANKIST APP (cont.): Creating DOM Elements */\r\n// Create new row (element with class=\"movements__row\" for each account's movement\r\n// with 'sort' parameter\r\nconst displayMovements = function(account, sort = false) {\r\n\t// Empty the container (element with class=\"movements\" ('containerMovements' variable))\r\n\tcontainerMovements.innerHTML = '';\r\n\t//// NOTE: textContent: return the text itself  ;   innerHTML: return everything (all HTML tags)\r\n\r\n\t/* Lec160. Sorting Arrays */\r\n\t// ----------Lec160----------\r\n\t// If sort === false -> dont sort; Else if sort === true -> do the sort\r\n\t// Use slice() to create a copy of movements (don't implement directly on 'movements'\r\n\t// const newMovements = sort ? account.movements.slice().sort((a, b) => a - b) : account.movements;\r\n\r\n\t/* Add to teacher's code */\r\n\t// Sort the movements, and match with the date of that movement\r\n\tlet combinedArray = []; //array combining movements and dates (ex: [movement: 200, date: '2020-07-26T12:01:20.894Z'])\r\n\tlet newMovements;\r\n\tlet NewDates;\r\n\tif (sort) {\r\n\t\tfor (let j = 0; j < currentAccount.movements.length; j++) {\r\n\t\t\tcombinedArray.push({\r\n\t\t\t\tmovement: currentAccount.movements[j],\r\n\t\t\t\tdate: currentAccount.movementsDates[j]\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tcombinedArray.sort((a, b) => a.movement - b.movement); //sort by movement values\r\n\r\n\t\t// Add new array: movementsSorted and movementsDateSorted to the account object\r\n\t\tfor (let k = 0; k < combinedArray.length; k++) {\r\n\t\t\tcurrentAccount.movementsSorted[k] = combinedArray[k].movement;\r\n\t\t\tcurrentAccount.movementsDatesSorted[k] = combinedArray[k].date;\r\n\t\t}\r\n\t\tnewMovements = currentAccount.movementsSorted;\r\n\t\tNewDates = currentAccount.movementsDatesSorted;\r\n\t} else {\r\n\t\tnewMovements = currentAccount.movements;\r\n\t\tNewDates = currentAccount.movementsDates;\r\n\t}\r\n\t// -------------------- \\\\\\\r\n\r\n\tnewMovements.forEach(function(mov, i) {\r\n\t\tconst type = mov > 0 ? 'deposit' : 'withdrawal';\r\n\r\n\t\t// Create the html element by using ``\r\n\t\t// <div class=\"movements__row\">\r\n\t\t//     <div class=\"movements__type movements__type--deposit\">2 deposit</div>\r\n\t\t//     <div class=\"movements__date\">3 days ago</div> // not now\r\n\t\t//     <div class=\"movements__value\">4 000€</div>\r\n\t\t// </div>\r\n\r\n\t\t/* Lec167. Math and Rounding */\r\n\t\t//----------Lec167----------\r\n\t\t// Rounding movements to a 2 decimal characters --> .toFixed(2)\r\n\t\tconst amount = Math.floor(inputLoanAmount.value);\r\n\t\t// --------------------\r\n\r\n\t\t/* Lec171. Adding Dates */\r\n\t\t// ----------Lec171----------\r\n\t\tconst date = new Date(NewDates[i]); //get the date of the movement based on index\r\n\r\n\t\tconst displayDate = formatMovementDate(date, account.locale);\r\n\r\n\t\t/* Lec174. Internationalization API (Intl) - Numbers */\r\n\t\t// ----------Lec174---------- \\\\\r\n\t\tconst formattedMov = formatCurrency(mov, account.locale, account.currency);\r\n\t\t// -------------------------- \\\\\r\n\r\n\t\tconst html = `\r\n            <div class=\"movements__row\">\r\n\t\t\t\t<div class=\"movements__type movements__type--${type}\">${i + 1} ${type}</div>\r\n\t\t\t\t<div class=\"movements__date\">${displayDate}</div>\r\n                <div class=\"movements__value\">${formattedMov}</div>\r\n            </div>`;\r\n\r\n\t\t// Add 'html' to element with class=\"movements\" ('containerMovements' variable)\r\n\t\t//// .insertAdjacentHTML(<position to add>, <element>)\r\n\t\t// <!-- beforebegin -->: before <element>\r\n\t\t// <p> <-- p is <element> in this case\r\n\t\t//     <!-- afterbegin -->: inside <element>, before its 1st child\r\n\t\t//     foo\r\n\t\t//     <!-- beforeend -->: inside <element>, after its last child\r\n\t\t// </p>\r\n\t\t// <!-- afterend -->: after <element>\r\n\t\tcontainerMovements.insertAdjacentHTML('afterbegin', html);\r\n\t});\r\n};\r\n// displayMovements(account1.movements);\r\n\r\nfunction formatMovementDate(date, locale) {\r\n\t/* Lec171. Adding Dates */\r\n\t// ----------Lec171----------\r\n\r\n\t/* Lec172. Operations with Dates */\r\n\t// ----------Lec172---------- \\\\\r\n\t// Calculate difference between 2 days in days (round value to the nearest integers)\r\n\tconst calcDaysPassed = (date1, date2) => Math.round(Math.abs(date2 - date1) / (1000 * 60 * 60 * 24));\r\n\tconst daysPassed = calcDaysPassed(new Date(), date); //Calculate difference between current day and movement' date\r\n\tconsole.log(`daysPassed = ${daysPassed}`);\r\n\r\n\t// If date is yesterday --> display \"Yesterday\"\r\n\t// If date is a few days ago --> display \"x days ago\"\r\n\tif (daysPassed === 0) return 'Today';\r\n\tif (daysPassed === 1) return 'Yesterday';\r\n\tif (daysPassed <= 7) return `${daysPassed} days ago`;\r\n\r\n\t// //return the format date\r\n\t// const day = date.getDate();\r\n\t// const month = date.getMonth() + 1; // + 1 because month starts with 0: Jan\r\n\t// const year = date.getFullYear();\r\n\r\n\t// //// If day or month or hour or minute is 1 digit --> pad a zero at the start to make it 2 digits\r\n\t// //// --> padStart(<length>, <character>)\r\n\t// const dayPadding = day.toString().padStart(2, 0);\r\n\t// const monthPadding = month.toString().padStart(2, 0);\r\n\t// return `${dayPadding}/${monthPadding}/${year}`;\r\n\r\n\t/* Lec173. Internationalization API (Intl) */\r\n\t// ----------Lec173---------- \\\\\r\n\treturn new Intl.DateTimeFormat(locale).format(date); //dont add options because we just want to display the simplest date\r\n}\r\n\r\n/* Lec174. Internationalization API (Intl) - Numbers */\r\n// ----------Lec174---------- \\\\\r\n// Use Intl() API to format money for a locale\r\nfunction formatCurrency(value, locale, currency) {\r\n\tconst options = {\r\n\t\tstyle: 'currency',\r\n\t\tcurrency: currency\r\n\t};\r\n\treturn new Intl.NumberFormat(locale, options).format(value);\r\n}\r\n\r\n/* Lec148. Computing Usernames */\r\nconsole.log('----------Lec148----------');\r\n\r\nconst user = 'Steven Thomas Williams'; //username = 'stw'\r\n// Method 1:\r\nlet createUserNames = function(user) {\r\n\tlet username = '';\r\n\tuser.toLowerCase().split(' ').forEach(function(word) {\r\n\t\tusername += word[0];\r\n\t});\r\n\treturn username;\r\n};\r\nconsole.log(createUserNames(user));\r\n\r\n// Method 2:\r\ncreateUserNames = function(user) {\r\n\tconst username = user\r\n\t\t.toLowerCase()\r\n\t\t.split(' ')\r\n\t\t.map(function(word) {\r\n\t\t\treturn word[0];\r\n\t\t})\r\n\t\t.join('');\r\n\treturn username;\r\n};\r\nconsole.log(createUserNames(user));\r\n\r\n// Method 3: Use arrow function for short:\r\ncreateUserNames = function(user) {\r\n\tconst username = user.toLowerCase().split(' ').map((word) => word[0]).join('');\r\n\treturn username;\r\n};\r\nconsole.log(createUserNames(user));\r\n\r\n// Create username property for each account object\r\ncreateUserNames = function(accounts) {\r\n\taccounts.forEach(function(acc) {\r\n\t\tacc.username = acc.owner.toLowerCase().split(' ').map((word) => word[0]).join('');\r\n\t});\r\n};\r\ncreateUserNames(accounts);\r\nconsole.log(accounts);\r\n\r\n/* Lec150. The reduce method */\r\nconsole.log('----------Lec150----------');\r\n// Calculate the current balance (current money in the account)\r\nconst calcDisplayBalance = function(account) {\r\n\taccount.balance = account.movements.reduce((acc, mov) => acc + mov, 0);\r\n\r\n\t// Display in labelBalance element\r\n\t/* Lec167. Math and Rounding */\r\n\t//----------Lec167----------\r\n\t// Rounding balance to a 2 decimal characters --> .toFixed(2)\r\n\t// labelBalance.textContent = `${account.balance}€`;\r\n\t// labelBalance.textContent = `${account.balance.toFixed(2)}€`;\r\n\r\n\t/* Lec174. Internationalization API (Intl) - Numbers */\r\n\t// ----------Lec174---------- \\\\\r\n\tlabelBalance.textContent = formatCurrency(account.balance, account.locale, account.currency);\r\n};\r\n// calcDisplayBalance(account1.movements);\r\n\r\n/* Lec152. The Chain Methods */\r\nconsole.log('----------Lec152----------');\r\nconst calcDisplaySummary = function(account) {\r\n\t// Income: sum of all deposits\r\n\t// Outcome: sum of all withdrawals\r\n\t// Interest: money that the bank will pay\r\n\tconsole.log('___Incomes___');\r\n\tconst incomes = account.movements.filter((mov) => mov > 0).reduce((acc, mov) => {\r\n\t\tconsole.log(`${acc} + ${mov} = ${acc + mov}`);\r\n\t\treturn acc + mov;\r\n\t}, 0);\r\n\r\n\t/* Lec167. Math and Rounding */\r\n\t//----------Lec167----------\r\n\t// Rounding incomes to a 2 decimal characters --> .toFixed(2)\r\n\t// labelSumIn.textContent = `${incomes.toFixed(2)}€`; //html element displaying incomes\r\n\r\n\t/* Lec174. Internationalization API (Intl) - Numbers */\r\n\t// ----------Lec174---------- \\\\\r\n\tlabelSumIn.textContent = formatCurrency(incomes, account.locale, account.currency);\r\n\t// -------------------------- \\\\\r\n\r\n\tconsole.log('___Outcomes___');\r\n\tconst outcomes = account.movements.filter((mov) => mov < 0).reduce((acc, mov) => {\r\n\t\tconsole.log(`${acc} + ${mov} = ${acc + mov}`);\r\n\t\treturn acc + mov;\r\n\t}, 0);\r\n\r\n\t/* Lec167. Math and Rounding */\r\n\t//----------Lec167----------\r\n\t// Rounding outcomes to a 2 decimal characters --> .toFixed(2)\r\n\t// labelSumOut.textContent = `${Math.abs(outcomes).toFixed(2)}€`; //html element displaying outcomes\r\n\r\n\t/* Lec174. Internationalization API (Intl) - Numbers */\r\n\t// ----------Lec174---------- \\\\\r\n\tlabelSumOut.textContent = formatCurrency(Math.abs(outcomes), account.locale, account.currency);\r\n\t// -------------------------- \\\\\r\n\r\n\tconsole.log('___Interests___'); //Interests on deposits, interest = 1.2 * deposit, only if interest >= 1€\r\n\tconst interest = account.movements\r\n\t\t.filter((mov) => mov > 0) //filter deposit (movement > 0)\r\n\t\t.map((deposit) => deposit * account.interestRate / 100) //calc interest = deposit * rate%\r\n\t\t.filter((interest, i, arr) => {\r\n\t\t\tconsole.log(arr);\r\n\t\t\treturn interest >= 1;\r\n\t\t}) //filter interest >= 1€\r\n\t\t.reduce((acc, interest) => acc + interest, 0);\r\n\r\n\t/* Lec167. Math and Rounding */\r\n\t//----------Lec167----------\r\n\t// Rounding interest to a 2 decimal characters --> .toFixed(2)\r\n\t// labelSumInterest.textContent = `${interest.toFixed(2)}€`; //html element displaying interests\r\n\r\n\t/* Lec174. Internationalization API (Intl) - Numbers */\r\n\t// ----------Lec174---------- \\\\\r\n\tlabelSumInterest.textContent = formatCurrency(interest, account.locale, account.currency);\r\n\t// -------------------------- \\\\\r\n\r\n\tconsole.log(incomes, outcomes, interest);\r\n\t// let income, outcome, interest;\r\n};\r\n// calcDisplaySummary(account1);\r\n\r\nconst updateUI = function(account) {\r\n\t// Display data\r\n\tdisplayMovements(account);\r\n\tcalcDisplayBalance(account);\r\n\tcalcDisplaySummary(account);\r\n};\r\n/* Lec154. The find Method */\r\nconsole.log('----------Lec154----------');\r\nconsole.log(accounts); //array of objects\r\nconst account = accounts.find((acc) => acc.owner === 'Jessica Davis');\r\nconsole.log(account); //return an object\r\n\r\n// same as (using for loop):\r\nlet result;\r\nfor (const acc of accounts) {\r\n\tif (acc.owner === 'Jessica Davis') {\r\n\t\tresult = acc;\r\n\t\tbreak;\r\n\t}\r\n}\r\nconsole.log(result);\r\n\r\n/* Lec155. Login */\r\nconsole.log('----------Lec155----------');\r\n\r\nlet currentAccount; //global variable for the login user\r\n\r\n/* Lec176. Implement a countdown timer */\r\n// ----------Lec176----------\r\nlet timer; //global variable for the timer clock\r\n\r\n//// FAKE ALWAYS LOGGED IN \\\\\\\\\r\n// currentAccount = account1;\r\n// updateUI(currentAccount);\r\n// containerApp.style.opacity = 100;\r\n\r\n/* Lec176. Implement a countdown timer */\r\n// ----------Lec176----------\r\n// Log out users after some inactive time: after 5mins without doing anything\r\nconst startLogOutTimer = function() {\r\n\tlet seconds = 5 * 60; // 5 minutes = 300 seconds to logout if there are no activities\r\n\tconst tick = function() {\r\n\t\tlet min = String(Math.trunc(seconds / 60)).padStart(2, 0);\r\n\t\tlet sec = String(seconds % 60).padStart(2, 0); //if < 10 -> padding a '0' to the start to make 2 digits (ex: 1 --> 01)\r\n\t\t// In each call, print the remaining time\r\n\t\tlabelTimer.textContent = `${min}:${sec}`;\r\n\r\n\t\t// After second 0, stop timer and log out user\r\n\t\t//// Stop timer\r\n\t\tif (seconds < 0) {\r\n\t\t\tclearInterval(timer); //timer variable is at (*)\r\n\t\t\t//// Logout\r\n\t\t\tlabelWelcome.textContent = 'Log in to get started';\r\n\t\t\tcontainerApp.style.opacity = 0;\r\n\t\t}\r\n\r\n\t\t// Decrease 1s\r\n\t\tseconds--;\r\n\t};\r\n\r\n\t// Call and update the timer every second\r\n\ttick(); //must execute the function immediate before the timer starts\r\n\tconst timer = setInterval(tick, 1000); //(*)\r\n\r\n\t// return the timer to stop it later in the btnLogin function\r\n\treturn timer;\r\n};\r\n// -------------------------- \\\\\r\n\r\nbtnLogin.addEventListener('click', function(event) {\r\n\t//NOTE: By default, clicking a Submit button in a form will reload page => Need to be prevented\r\n\t//NOTE: Fill the form and press 'Enter' will automatically activate 'click' event of the button\r\n\tevent.preventDefault();\r\n\r\n\t// Check username and PIN for login\r\n\tcurrentAccount = accounts.find(\r\n\t\t(acc) => acc.username === inputLoginUsername.value && acc.pin === Number(inputLoginPin.value)\r\n\t); //get user matches with the input username and PIN // use .value to get content of tag <input>\r\n\t// If exists user with input username and PIN --> display the 'app' element (CSS style opacity = 100) & welcome label\r\n\tif (currentAccount) {\r\n\t\tcontainerApp.style.opacity = 100;\r\n\t\tlabelWelcome.textContent = `Welcome back, ${currentAccount.owner.split(' ')[0]}!`; //get owner's 1st name\r\n\r\n\t\t/* Lec171. Adding Dates\r\n\t\t// ----------Lec171----------\r\n\t\t// Add current date: day/month/year\r\n\t\tconst now = new Date();\r\n\t\tconst day = now.getDate();\r\n\t\tconst month = now.getMonth() + 1; // + 1 because month starts with 0: Jan\r\n\t\tconst year = now.getFullYear();\r\n\t\tconst hour = now.getHours();\r\n\t\tconst minute = now.getMinutes();\r\n\r\n\t\t//// If day or month or hour or minute is 1 digit --> pad a zero at the start to make it 2 digits (MUST CONVERT TO STRING BEFORE PADDING!)\r\n\t\t//// --> padStart(<length>, <character>)\r\n\t\tconst dayPadding = day.toString().padStart(2, 0);\r\n\t\tconst monthPadding = month.toString().padStart(2, 0);\r\n\t\tconst hourPadding = hour.toString().padStart(2, 0);\r\n\t\tconst minutePadding = minute.toString().padStart(2, 0);\r\n\t\t//// or:\r\n\t\t// const day = `${now.getDate()}`.padStart(2, 0);\r\n\t\t//// or:\r\n\t\t// const day = String(now.getDate()).padStart(2, 0);\r\n\r\n\t\tlabelDate.textContent = `${dayPadding}/${monthPadding}/${year}, ${hourPadding}:${minutePadding}`;\r\n\t\t// --------------------------------- \\\\  */\r\n\r\n\t\t/* Lec173. Internationalization API (Intl) */\r\n\t\t// ----------Lec173---------- \\\\\r\n\t\t// Use Intl() API to format date for a locale: Intl.DateTimeFormat(<locale string>, <customized format options>).format(<date variable>)\r\n\r\n\t\t// Options to customize format string\r\n\t\tconst options = {\r\n\t\t\t// weekday: 'long', //Monday, Tuesday, ...\r\n\t\t\tweekday: 'short', //Mon, Tue, ...\r\n\t\t\t// weekday: 'narrow', //M, T, W, T, ...\r\n\r\n\t\t\tday: 'numeric',\r\n\r\n\t\t\t// month: 'numeric', //1, 2, 3, 4, ...\r\n\t\t\t// month: '2-digit', //01, 02, 03, 04, ...\r\n\t\t\t// month: 'long', //January, February, ...\r\n\t\t\tmonth: 'short', //Jan, Feb, ...\r\n\r\n\t\t\tyear: 'numeric', //2020, 2021, ...\r\n\t\t\t// year: '2-digit', //20, 21, ...\r\n\r\n\t\t\thour: 'numeric',\r\n\t\t\tminute: 'numeric'\r\n\t\t};\r\n\t\t// Get locale string based on account\r\n\t\tconst locale = currentAccount.locale;\r\n\t\tconsole.log(`My locale: ${locale}`);\r\n\r\n\t\t// Display the current date on labelDate\r\n\t\tconst now = new Date();\r\n\t\tlabelDate.textContent = new Intl.DateTimeFormat(locale, options).format(now); //Tue, Jan 12, 2021, 12:07 PM\r\n\t\t// --------------------------------- \\\\\r\n\r\n\t\t// Clear input fields\r\n\t\tinputLoginUsername.value = inputLoginPin.value = '';\r\n\t\tinputLoginUsername.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\t\tinputLoginPin.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\r\n\t\t/* Lec176. Implement a countdown timer */\r\n\t\t// ----------Lec176----------\r\n\t\t// Check if the timer is working then stops it and restart a new one\r\n\t\tif (timer) clearInterval(timer);\r\n\t\ttimer = startLogOutTimer(); //5 minutes = 5*60 minutes until log out\r\n\t\t// timer = startLogOutTimer(5);\r\n\t\t// --------------------------------- \\\\\r\n\r\n\t\t// Display data\r\n\t\tupdateUI(currentAccount);\r\n\t} else {\r\n\t\tcontainerApp.style.opacity = 0;\r\n\t\tlabelWelcome.textContent = `Wrong username or password!`;\r\n\t}\r\n\tconsole.log(inputLoginUsername.value, inputLoginPin.value, currentAccount);\r\n});\r\n\r\n/* Lec156. Transfer Feature */\r\nconsole.log('----------Lec156----------');\r\n\r\nbtnTransfer.addEventListener('click', function(event) {\r\n\t//NOTE: By default, clicking a Submit button in a form will reload page => Need to be prevented\r\n\t//NOTE: Fill the form and press 'Enter' will automatically activate 'click' event of the button\r\n\tevent.preventDefault();\r\n\r\n\tconst amountTransfer = Number(inputTransferAmount.value);\r\n\r\n\t// Find the username that we want to transfer to\r\n\tconst receiverAcc = accounts.find((acc) => acc.username === inputTransferTo.value);\r\n\tconsole.log(amountTransfer, receiverAcc);\r\n\r\n\t// Checking conditions:\r\n\t//// amount of transfer > 0\r\n\t//// receiver exists\r\n\t//// <= remaining balance (must have enough money left in the account)\r\n\t//// receiver !== current account (cannot transfer for urself)\r\n\tif (\r\n\t\tamountTransfer > 0 &&\r\n\t\treceiverAcc &&\r\n\t\tamountTransfer <= currentAccount.balance &&\r\n\t\treceiverAcc.username !== currentAccount.username\r\n\t) {\r\n\t\tconsole.log('Doing the transfer...');\r\n\t\tcurrentAccount.movements.push(-amountTransfer); //minus money from the current account\r\n\t\treceiverAcc.movements.push(amountTransfer); //add money to the received account\r\n\r\n\t\t/* Lec171. Adding Dates */\r\n\t\t// ----------Lec171----------\r\n\t\t// Add date to transfer movement\r\n\t\tcurrentAccount.movementsDates.push(new Date().toISOString());\r\n\t\treceiverAcc.movementsDates.push(new Date().toISOString());\r\n\t\t// --------------------------------- \\\\\r\n\r\n\t\t// Display data\r\n\t\tupdateUI(currentAccount);\r\n\r\n\t\t// Clear input fields\r\n\t\tinputTransferAmount.value = inputTransferTo.value = '';\r\n\t\tinputTransferAmount.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\t\tinputTransferTo.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\r\n\t\t/* Lec176. Implement a countdown timer */\r\n\t\t// ----------Lec176----------\r\n\t\t// Reset the timer\r\n\t\tclearInterval(timer); //stop the current timer\r\n\t\ttimer = startLogOutTimer();\r\n\t} else {\r\n\t\tconsole.log('NOT VALID AMOUNT OR RECEIVER!');\r\n\t}\r\n});\r\n\r\n/* Lec157. findIndex Method */\r\nconsole.log('----------Lec157----------');\r\n// findIndex(): returns the index of the element found\r\n// indexOf(): returns the index of the element found, but must match the whole element (simple)\r\n\r\n//// App's Close Account functionality: Before closing account, the current user must confirm username & PIN --> enter username & PIN --> look for account's index in 'accounts' array --> use 'splice(<index>)' to remove the account object from the array\r\nbtnClose.addEventListener('click', function(event) {\r\n\t//NOTE: By default, clicking a Submit button in a form will reload page => Need to be prevented\r\n\t//NOTE: Fill the form and press 'Enter' will automatically activate 'click' event of the button\r\n\tevent.preventDefault();\r\n\r\n\t// Before closing account, the current user must confirm username & PIN\r\n\t// Checking if the username & PIN match with the current user\r\n\tconsole.log(inputCloseUsername.value, currentAccount.username, inputClosePin.value, currentAccount.pin);\r\n\tif (inputCloseUsername.value === currentAccount.username && inputClosePin.value == currentAccount.pin) {\r\n\t\t// findIndex(): find the index of the account object in 'accounts' array\r\n\t\t// findIndex(<element>, <index>, <array>)\r\n\t\tconst i = accounts.findIndex(\r\n\t\t\t(acc) => acc.username === currentAccount.username && acc.pin === currentAccount.pin\r\n\t\t);\r\n\t\taccounts.splice(i, 1); //delete 1 element at index = i\r\n\t\tconsole.log(accounts);\r\n\r\n\t\t// Clear input fields\r\n\t\tinputCloseUsername.value = inputClosePin.value = '';\r\n\t\tinputCloseUsername.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\t\tinputClosePin.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\r\n\t\t// Hide UI (logout)\r\n\t\tcontainerApp.style.opacity = 0;\r\n\t\tlabelWelcome.textContent = 'Log in to get started';\r\n\t} else {\r\n\t\tconsole.log(\"Wrong Confirmation Information! Can't close this account!\");\r\n\t}\r\n});\r\n\r\n/* Lec158. some and every */\r\nconsole.log('----------Lec158----------');\r\n// some(): App's Request Loan functionality\r\n/// The bank only accept a loan if there is at least 1 deposit of the account with at least 10% of the requested loan amount (eg: amount = 10000 => 10%*amount = 1000 => accept the loan amount if there is at least 1 deposit >= 1000 in the account)\r\nbtnLoan.addEventListener('click', function(event) {\r\n\t//NOTE: By default, clicking a Submit button in a form will reload page => Need to be prevented\r\n\t//NOTE: Fill the form and press 'Enter' will automatically activate 'click' event of the button\r\n\tevent.preventDefault();\r\n\r\n\t/* Lec167. Math and Rounding */\r\n\tconsole.log('----------Lec167----------');\r\n\t// Rounding DOWN loan amount --> use Math.floor()\r\n\tconst amount = Math.floor(inputLoanAmount.value);\r\n\t// --------------------\r\n\r\n\tif (amount > 0 && currentAccount.movements.some((mov) => mov >= amount * 0.1)) {\r\n\t\t/* Lec175. Timers: setTimeOut and setInterval */\r\n\t\t// ----------Lec175---------- \\\\\r\n\t\t// Wait for 3 seconds before adding the loan amount to movements (it takes 3 secs to loan successfully)\r\n\t\tconsole.log('3 seconds left...');\r\n\t\tsetTimeout(() => console.log('2 seconds left...'), 1000); //call the function after 1 milliseconds\r\n\t\tsetTimeout(() => console.log('1 seconds left...'), 2000); //call the function after 2 milliseconds\r\n\t\tsetTimeout(function() {\r\n\t\t\t// Add movement\r\n\t\t\tcurrentAccount.movements.push(amount);\r\n\r\n\t\t\t/* Lec171. Adding Dates */\r\n\t\t\t// ----------Lec171----------\r\n\t\t\t// Add date to loan movement\r\n\t\t\tcurrentAccount.movementsDates.push(new Date().toISOString());\r\n\t\t\t// --------------------------------- \\\\\r\n\r\n\t\t\t// Display data\r\n\t\t\tupdateUI(currentAccount);\r\n\r\n\t\t\t// Clear input fields\r\n\t\t\tinputLoanAmount.value = '';\r\n\t\t\tinputLoanAmount.blur(); //prevent cursor from focusing on the textbox after \"Enter\"\r\n\r\n\t\t\t/* Lec176. Implement a countdown timer */\r\n\t\t\t// ----------Lec176----------\r\n\t\t\t// Reset the timer\r\n\t\t\tclearInterval(timer); //stop the current timer\r\n\t\t\ttimer = startLogOutTimer();\r\n\t\t}, 3000);\r\n\t\tsetTimeout(() => console.log('Loan successfully!'), 3000); //call the function after 2 milliseconds\r\n\t} else {\r\n\t\tconsole.log('You cannot request this amount of loan!');\r\n\t}\r\n});\r\n\r\n/* Lec159. flat and flatMap (ES2019) */\r\nconsole.log('----------Lec159----------');\r\n// flat():\r\n// Calculate the overal balance of all movements of all accounts\r\n//// accounts = [acc1, acc2, acc3, acc4], acc1 = { ..., movements: [100, -500, 2000], ...}\r\n//// Goal: put all movements array into 1 flat array\r\nconst accountMovements = accounts.map((acc) => acc.movements); //get all 'movements' arrays into 1 array: [[mov1], [mov2], ...]\r\nconsole.log(accountMovements);\r\nconst allMovements = accountMovements.flat(); //get all movements into 1 array\r\nconsole.log(allMovements);\r\nconst overalBalance = allMovements.reduce((acc, mov) => acc + mov, 0); //add all movements\r\nconsole.log(overalBalance);\r\n\r\n//// Use chaining instead:\r\nconst overalBalance1 = accounts.map((acc) => acc.movements).flat().reduce((acc, mov) => acc + mov, 0);\r\nconsole.log(overalBalance1);\r\n\r\n// flatmap(): combines 'flat' and 'map' methods (only flatten 1 level, cannot change the depth)\r\nconst overalBalance2 = accounts.flatMap((acc) => acc.movements).reduce((acc, mov) => acc + mov, 0);\r\nconsole.log(overalBalance2);\r\n\r\n/* Lec160. Sorting Arrays */\r\nconsole.log('----------Lec160----------');\r\nlet sorted = false; //status shows whether the movements array are sorted or not\r\nbtnSort.addEventListener('click', function(event) {\r\n\tevent.preventDefault();\r\n\tdisplayMovements(currentAccount, !sorted); //when sorted === false => call function displayMovements(movements, sort=true) and do the sort\r\n\tsorted = !sorted; //update sorted status\r\n});\r\n\r\n/* Lec161. More Ways of Creating and Filling Arrays */\r\nconsole.log('----------Lec161----------');\r\n// querySelectorAll() find all elements with the given class/ID --> returns a NodeList: nearly like an array contains all selected elements\r\n\r\n//// Click the balance label --> show sum of all displayed movements\r\n//// First, we must convert NodeList to an array\r\n\r\nlabelBalance.addEventListener('click', function() {\r\n\t// Return value of .querySelectorAll()\r\n\tconsole.log('Return values of .querySelectorAll()');\r\n\tconsole.log(document.querySelectorAll('.movements__value')); //NodeList [div.movements__value, div.movements__value, ...]\r\n\r\n\t// Convert a NodeList to array\r\n\t//// Method 1: use Array.from()\r\n\tconst movementsUI = Array.from(document.querySelectorAll('.movements__value'), (elem) =>\r\n\t\tNumber(elem.textContent.replace('€', ''))\r\n\t); //return array of all movements in numbers after removing the Euro sign\r\n\tconsole.log('movementsUI');\r\n\tconsole.log(movementsUI);\r\n\r\n\t//// Method 2: use spread operator '...'\r\n\tconst movementsUI2 = [ ...document.querySelectorAll('.movements__value') ].map((elem) =>\r\n\t\tNumber(elem.textContent.replace('€', ''))\r\n\t);\r\n\tconsole.log('movementsUI2');\r\n\tconsole.log(movementsUI2);\r\n\r\n\t// Calculate sum of movements in movementsUI\r\n\tconst sumMovs = movementsUI.reduce((curr, mov) => curr + mov);\r\n\tconsole.log('Sum of all movements:');\r\n\tconsole.log(sumMovs);\r\n});\r\n\r\n/* Lec168. The Remainder Operator */\r\nconsole.log('----------Lec168----------');\r\n\r\n// Fun practice: Click the logo --> rows with even index will be yellow\r\ndocument.querySelector('.logo').addEventListener('click', function() {\r\n\tconsole.log('----------Clicked----------');\r\n\t[ ...document.querySelectorAll('.movements__row') ].forEach(function(row, i) {\r\n\t\tif (i % 2 === 0) row.style.backgroundColor = 'yellow';\r\n\t});\r\n});\r\n\r\n//\r\n"],"names":["accounts","owner","movements","movementsSorted","interestRate","pin","movementsDates","movementsDatesSorted","currency","locale","labelWelcome","document","querySelector","labelDate","labelBalance","labelSumIn","labelSumOut","labelSumInterest","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","btnSort","inputLoginUsername","inputLoginPin","inputTransferTo","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","displayMovements","account","sort","arguments","length","undefined","innerHTML","newMovements","NewDates","combinedArray","j","currentAccount","push","movement","date","a","b","k","forEach","mov","i","type","displayDate","Math","floor","value","formatMovementDate","Date","formattedMov","formatCurrency","html","concat","insertAdjacentHTML","date1","date2","daysPassed","round","abs","console","log","Intl","DateTimeFormat","format","options","style","NumberFormat","createUserNames","user","username","toLowerCase","split","word","map","join","acc","updateUI","balance","reduce","textContent","calcDisplayBalance","incomes","filter","outcomes","interest","deposit","arr","calcDisplaySummary","result","timer","find","$f6f28d5949468db896feb4bd1be38726$var$_i","$f6f28d5949468db896feb4bd1be38726$var$_accounts","startLogOutTimer","seconds","tick","min","String","trunc","padStart","sec","clearInterval","opacity","setInterval","addEventListener","event","preventDefault","Number","now","weekday","day","month","year","hour","minute","blur","amountTransfer","receiverAcc","toISOString","findIndex","splice","amount","some","setTimeout","accountMovements","allMovements","flat","overalBalance","overalBalance1","overalBalance2","flatMap","sorted","querySelectorAll","movementsUI","Array","from","elem","replace","movementsUI2","$f6f28d5949468db896feb4bd1be38726$var$_toConsumableArray","sumMovs","curr","row","backgroundColor"],"version":3,"file":"scriptProject.b5e35b38.js.map"}